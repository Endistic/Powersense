# -*- coding: utf-8 -*-
"""Api Paltfrom Kucoin Exchange_Original_1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kAxYWhLkZkL0yAE165mka3VEaGboGPrI

# Credit

Api Paltfrom FTX Exchange
        ให้เครดิตผู้ที่เคยจัดทำ

```
# ให้เครดิตผู้ที่เคยจัดทำ 
#ฉบับนี้จัดทำโดย Dragonsleep Wake up (Arnan Kaewcharean)

#กองทุนความมั่งคั่งแห่งชาติ
#Credit1 : Nattapon Soomtha (กองทุนความมั่งคั่งแห่งชาติ Training)
#Credit2 : b2 spetsnaz club
#Credit3 : TEERACHAI RATTANABUNDITSAKUL
#Credit3 : Akkarawat Mansap
```
"""

# Commented out IPython magic to ensure Python compatibility.
#@title id Account, import Libary 
# %config InlineBackend.figure_format = 'retina'
import ccxt
import json
import pandas as pd
import tkinter
import matplotlib.pyplot as plt
from IPython.display import display
from datetime import datetime
import time



plt.style.use ('seaborn-white')
plt.rcParams["figure.figsize"] = [15,6]


apiKey = "--------------------------------" #@param [""] {allow-input: true}
secret = "---------------------------"  #@param {type:"string"}
subaccount = "---- main = 0 , subacc ---- " #@param ["---- main = 0 , subacc ---- "] {allow-input: true}
password = "----------------------" #@param ["----------------------"] {allow-input: true}




exchange = ccxt.kucoin({
    'apiKey' :apiKey,'secret' : secret,'subaccount':subaccount,'password':password,'enbleRateLimit':True
    }) 
   
if subaccount == "0":
  print("This is Main Account")
else:
  exchange.headers = {
   'KUCOIN-SUBACCOUNT': subaccount,
  }

#@title ฟังก์ชั่น คำนวนการใช้งาน
def getBalance():
    print("PORT BALANCE =",exchange.fetch_balance())

def getfreeCol():
    freeCol = exchange.fetchFreeBalance()['result'][0]['free']
    return freeCol        


def get_product(exchange):
  return exchange.symbols


def showPending(pair):
    print("Your Pending Order")
    df1 = pd.DataFrame(exchange.fetch_open_orders(pair),
                   columns=['id','datetime','status','symbol','type','side','price','amount','filled','average','remaining'])
    display(df1)


def showMatched(pair):
    print("Your Matched Order")
    df2 = pd.DataFrame(exchange.fetchMyTrades(pair),
                   columns=['id','datetime','status','symbol','type','side','price','amount','filled','average','remaining'])
    display(df2)    


def sendOrder():
  if types == "limit":
    exchange.create_order(pair, types , side, size_order, price)
    print("limit")
    showPending(pair)
    print("limit")
    showMatched(pair)
  elif types =="maket":
    exchange.create_order(pair, types , side, size_order)
    print("maket")
    showPending(pair)
    print("maket")
    showMatched(pair)


def cancelOrder():
    try:
      exchange.cancel_order(id)
      print('Your Id No. '+ id + ' has been cancelled')
    except:
      print("Please Input Correct Id number")


def checkOrder():               
    try:
      showPending(pair)
      print("     ")
      showMatched(pair)
    except:
      print("please input correct pair")

def display_graph(exchange, pair, timeframe):
  # Load OHLCV (open/high/low/close/volume) data with 1-hour resolution
  ohlcv = exchange.fetch_ohlcv(pair, timeframe)

  # Get closeing prices for each day
  prices = [x[4] for x in ohlcv]

  # convert Unix timestamps to Python dates
  dates = [datetime.fromtimestamp(x[0] // 1000) for x in ohlcv]

  # Prepare a Pandas series object
  data = pd.Series(prices, index=dates)

  #Draw a simple line chart
  data.plot()

"""# การใช้งาน"""

#@title เรียกดู Procuct
get_product(exchange)

#@title เรียกดูกราฟสถิติ
pair = "XLM/USDT" #@param ["BTC/USDT", "XRP/USDT", "XLM/USDT"] {allow-input: true}
timeframe = "1h" #@param ["1m", "1h", "4h", "1d"] {allow-input: true}

display_graph(exchange, pair, timeframe)

#@title เช็คยอดเงิน, ราคาปัจจุบัน
pair = "XRP/USDT" #@param ["BTC/USDT", "XRP/USDT", "XLM/USDT"] {allow-input: true}

r1 = json.dumps(exchange.fetch_ticker(pair)) 
dataPrice = json.loads(r1)
print(exchange)
print(pair+'=',dataPrice['last'])

#exchange.privateGetWalletBalances()
getBalance()

"""# ส่งคำสั่งซื้อขาย"""

#@title รายละเอียดคำสั่งที่ต้องการซื้อ-ขาย
pair = "XRP/USDT" #@param ["BTC/USDT", "XRP/USDT", "XLM/USDT"] {allow-input: true}
size_order = none #@param ["\u0E37none"] {type:"raw", allow-input: true}
price = none #@param ["none"] {type:"raw", allow-input: true}
types = "limit" #@param ["limit", "maket"] {allow-input: true}
side = "buy"             #@param ["buy", "sell"] {allow-input: true}

  
sendOrder()

#@title ยกเลิกคำสั่ง
id = "" #@param {type:"string"}

cancelOrder()

"""# สถานะ ประวัติคำสั่งซื้อ-ขาย"""

#@title ตรวจสอบคำสั่ง
pair = "XLM/USDT" #@param ["BTC/USDT", "XRP/USDT", "XLM/USDT"] {allow-input: true}

checkOrder()